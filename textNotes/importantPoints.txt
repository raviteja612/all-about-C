/* This document highlights some of the key take aways from the course */

1. calloc allocates memory and initializes with all zeros
Syntax: int *ptr = (int *) calloc(count, sizeof(datatype))

2. structure variable "v" can be used to access its members using "." operator, whereas a pointer to a structure variables
can use "->" operator to access its members. Both of them would result in the value of the members.
So if a struct member is a pointer, use dereferencing to access its values

Ex:
struct Books{
int num;
int *pNum;
} *pBooks;

pBooks->num gives its value and &pBooks->num gives the address of num.
pBooks->pNum results in the address pointed by pNum and *pBooks->pNum results in the value at that address


3. Data alignment:
Lecture 26 in the Udemy course defines how a data is aligned by C compiler.
Let's say if a struct has int, double and other data types, then for efficient memory allcation, it checks for the longest data type in the struct.
A struct like this:
{
int a;
double b;
int c;
}
Gets 8bytes, 8bytes and 8bytes -- all aligned one below the Otherwise

where as the same struct defined this way:
{
int a;
int b;
double c;
}
allocates 4bytes + 4bytes as a single word followed by the 8bytes for the float.
This is the reason why we define all the int variables at a single place and all the floats together in our code for efficient memory utilization.

Hence it is always good practice to malloc a pointer to a struct using the sizeof(struct) rather than the definite number. One other reason why it is a
bad practice is because the size of that differs from compiler to compiler.

4. You can return a pointer to a local variable from a function if you used malloc to allocate memory to that pointer.
Otherwise the pointer loses its allocation when it is returned from the function. Because in the first case it is allocated in heap which persists,
whereas in the latter case it is allocated in the stack and hence gets dumped.
The best way would be to allocate outside of the function call and pass the pointer inside the function so that the
function is independent of what data type it is receiving and can focus on the actual functionality

5. Pointer arithmetic (moving the pointer to the next element like p+1) cannot be done for generic pointers like (void) pointers

6. For plain stack:
Create an array of predefined length within a struct

For stack using pointers
Create a pointer to itself of same structure type

7. Enums are self-declared data types

Ex: enum Week{Mon, Tue, Wed);
enum Week day = 2;
if (day==Tue)

The practical application would be to name the API values. Say targetDetectionVad takes values from 0 to 7
While checking the API value in the code, it is more intuitive to use these rather than direct numbers

8. function pointers can be used to call a function.
Not much real use.
Example:
int square (int a)
{
return a*a;
}

(int) (*funcPtr)(int);
funcPtr = square;
int output = funcPtr(3);

9. memcpy helps to create an extra copy of the data. 
but while copying so, say a structure, has another pointer within it, then that needs to be copied separately. 
Other wise, both the copies refer to the same memory location. Like in python (copy.deepcopy)

10. char *b = (char *)malloc(10);
free(b);
free(b);

Doing this twice will be problematic for some compilers.

11. Memory leaks occur when a pointer pointing to a memory is not freed.
If you create a for loop and allocate the memory to a variable. Then you need to free it everytime.

12. char *c = (char *)malloc(100);
char *b ;
b = c;
free(c);
strcpy(b, "hello");
This will be a problem coz "b" points to a freed memory

13. char* func(void)
{
 char b[10]= "Hello";
 char *bb = (char *)malloc(10);
 strcpy(bb, "hello");
 
 //Here b is allocated on stack while bb on heap. So returning b and  trying to access the data will be a problem
 
 14. char *b = NULL;
 b[0] = "s";
 This will be a problem since b points to nothing

}